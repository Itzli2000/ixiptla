---
import ArtifactCard from "../../../components/common/ArtifactCard/ArtifactCard.astro";
import { cultures, fullCollection } from "../../../data/collection";
import { getLangFromUrl, useTranslations } from "../../../i18n/utils";
import Layout from "../../../layouts/Layout.astro";

const lang = getLangFromUrl(Astro.url) as "en" | "es";
const t = useTranslations(lang);

const artifacts = fullCollection;
---

<Layout
  title={t("collection.title")}
  description={t("collection.description")}
  lang={lang}
>
  <section class="pt-10 lg:pt-24 pb-16 px-4 bg-base-100">
    <div class="mx-auto max-w-7xl">
      <h1 class="text-4xl md:text-5xl font-bold text-base-content text-center mb-8">
        {t("collection.title")}
      </h1>
      <p class="text-xl text-base-content/80 text-center max-w-3xl mx-auto mb-12">
        {t("collection.description")}
      </p>

      <div class="flex flex-col items-center gap-6 mb-12">
        <div class="flex flex-wrap gap-4 justify-center">
          {
            cultures.map((culture) => (
              <button
                data-culture={culture}
                class="filter-btn px-6 py-2 rounded-full transition-all duration-300
                bg-secondary/50 text-base-content hover:bg-secondary hover:text-secondary-content"
                aria-pressed="false"
              >
                {t(`collection.${culture.toLowerCase()}`)}
              </button>
            ))
          }
        </div>
        <div class="flex items-center gap-4">
          <div class="flex items-center gap-2">
            <button
              id="grid-view"
              class="p-2 rounded-lg bg-secondary/50 text-base-content hover:bg-secondary hover:text-secondary-content transition-colors"
              aria-label="Grid view"
              aria-pressed="true"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
              </svg>
            </button>
            <button
              id="list-view"
              class="p-2 rounded-lg bg-secondary/50 text-base-content hover:bg-secondary hover:text-secondary-content transition-colors"
              aria-label="List view"
              aria-pressed="false"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          </div>
          <div class="text-base-content/80">
            <span id="results-count">{artifacts.length}</span> {t("collection.results")}
          </div>
        </div>
      </div>

      <div id="artifacts-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 transition-all duration-500">
        {
          artifacts.map((artifact) => (
            <div 
              class="artifact-card transform transition-all duration-500" 
              data-culture={artifact.culture}
            >
              <ArtifactCard artifact={artifact} />
            </div>
          ))
        }
      </div>

      <div id="artifacts-list" class="hidden space-y-6">
        {
          artifacts.map((artifact) => (
            <div 
              class="artifact-card transform transition-all duration-500" 
              data-culture={artifact.culture}
            >
              <ArtifactCard artifact={artifact} variant="list" />
            </div>
          ))
        }
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const gridView = document.getElementById("grid-view");
    const listView = document.getElementById("list-view");
    const artifactsGrid = document.getElementById("artifacts-grid");
    const artifactsList = document.getElementById("artifacts-list");
    const resultsCount = document.getElementById("results-count");
    const filterButtons = document.querySelectorAll(".filter-btn");
    let currentFilter = "all";

    function updateView(view: "grid" | "list") {
      if (view === "grid") {
        artifactsGrid?.classList.remove("hidden");
        artifactsList?.classList.add("hidden");
        gridView?.setAttribute("aria-pressed", "true");
        listView?.setAttribute("aria-pressed", "false");
      } else {
        artifactsGrid?.classList.add("hidden");
        artifactsList?.classList.remove("hidden");
        gridView?.setAttribute("aria-pressed", "false");
        listView?.setAttribute("aria-pressed", "true");
      }
      handleFilter(currentFilter);
    }

    function handleFilter(culture: string) {
      const cards = document.querySelectorAll(".artifact-card");
      let visibleCount = 0;

      filterButtons.forEach((btn) => {
        if (btn instanceof HTMLElement) {
          const btnCulture = btn.dataset.culture;
          if (btnCulture === culture) {
            btn.classList.add("bg-primary", "text-primary-content");
            btn.classList.remove("bg-secondary/50", "text-base-content");
            btn.setAttribute("aria-pressed", "true");
          } else {
            btn.classList.remove("bg-primary", "text-primary-content");
            btn.classList.add("bg-secondary/50", "text-base-content");
            btn.setAttribute("aria-pressed", "false");
          }
        }
      });

      cards.forEach((card) => {
        if (card instanceof HTMLElement) {
          const cardCulture = card.dataset.culture;
          if (
            culture === "all" ||
            cardCulture?.toLowerCase().includes(culture.toLowerCase())
          ) {
            card.style.display = "block";
            card.style.opacity = "1";
            card.style.transform = "scale(1)";
            visibleCount++;
          } else {
            card.style.opacity = "0";
            card.style.transform = "scale(0.95)";
            setTimeout(() => {
              card.style.display = "none";
            }, 300);
          }
        }
      });

      if (resultsCount) {
        resultsCount.textContent = visibleCount.toString();
      }
    }

    gridView?.addEventListener("click", () => updateView("grid"));
    listView?.addEventListener("click", () => updateView("list"));

    filterButtons.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        if (e.currentTarget instanceof HTMLElement) {
          const culture = e.currentTarget.dataset.culture || "all";
          currentFilter = culture;
          handleFilter(culture);
        }
      });
    });

    // Initialize with "all" filter
    handleFilter("all");
  });
</script>
